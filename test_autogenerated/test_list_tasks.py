# Automatically generated by Pynguin.
import pytest
from todoist_cli import list_tasks
import typing as typing
import builtins as builtins
from rich import table


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xbb\x19"
    list_tasks.render_tasks(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    list_0 = []
    protocol_0 = typing.Protocol()
    list_tasks.render_tasks(list_0, list_0, protocol_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    lookup_error_0 = builtins.LookupError()
    list_tasks.render_tasks(lookup_error_0, lookup_error_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    list_1 = list_tasks.render_labels(list_0, list_0)
    assert list_tasks.priority_colors == {
        4: "[bold red1]P1[/bold red1]",
        3: "[bold orange1]P2[/bold orange1]",
        2: "[blue1]P3[/blue1]",
        1: "P4",
    }
    assert list_tasks.label_format == {
        30: "[deep_pink4]{}[/deep_pink4]",
        31: "[red1]{}[/red1]",
        32: "[orange1]{}[/orange1]",
        33: "[gold1]{}[/gold1]",
        34: "[dark_olive_green3]{}[/dark_olive_green3]",
        35: "[chartreuse3]{}[/chartreuse3]",
        36: "[green3]{}[/green3]",
        37: "[dark_turquoise]{}[/dark_turquoise]",
        38: "[deep_sky_blue3]{}[/deep_sky_blue3]",
        39: "[deep_sky_blue1]{}[/deep_sky_blue1]",
        40: "[sky_blue2]{}[/sky_blue2]",
        41: "[royal_blue1]{}[/royal_blue1]",
        42: "[slate_blue1]{}[/slate_blue1]",
        43: "[purple]{}[purple]",
        44: "[plum3]{}[/plum3]",
        45: "[deep_pink3]{}[/deep_pink3]",
        46: "[pale_violet_red1]{}[/pale_violet_red1]",
        47: "[grey35]{}[/grey35]",
        48: "[grey74]{}[/grey74]",
        49: "[tan]{}[/tan]",
    }
    list_2 = [list_1, list_0, list_1]
    list_tasks.render_labels(list_2, list_2)


def test_case_4():
    list_0 = []
    table_0 = list_tasks.render_tasks(list_0, list_0)
    assert len(table_0.columns) == 4
    assert table_0.rows == []
    assert table_0.title is None
    assert table_0.caption is None
    assert table_0.width is None
    assert table_0.min_width is None
    assert table_0.box is None
    assert table_0.safe_box is None
    assert table_0.pad_edge is True
    assert table_0.show_header is False
    assert table_0.show_footer is False
    assert table_0.show_edge is True
    assert table_0.show_lines is False
    assert table_0.leading == 0
    assert table_0.collapse_padding is False
    assert table_0.style == "none"
    assert table_0.header_style == "bold green"
    assert table_0.footer_style == "table.footer"
    assert table_0.border_style is None
    assert table_0.title_style is None
    assert table_0.caption_style is None
    assert table_0.title_justify == "left"
    assert table_0.caption_justify == "center"
    assert table_0.highlight is False
    assert table_0.row_styles == []
    assert list_tasks.priority_colors == {
        4: "[bold red1]P1[/bold red1]",
        3: "[bold orange1]P2[/bold orange1]",
        2: "[blue1]P3[/blue1]",
        1: "P4",
    }
    assert list_tasks.label_format == {
        30: "[deep_pink4]{}[/deep_pink4]",
        31: "[red1]{}[/red1]",
        32: "[orange1]{}[/orange1]",
        33: "[gold1]{}[/gold1]",
        34: "[dark_olive_green3]{}[/dark_olive_green3]",
        35: "[chartreuse3]{}[/chartreuse3]",
        36: "[green3]{}[/green3]",
        37: "[dark_turquoise]{}[/dark_turquoise]",
        38: "[deep_sky_blue3]{}[/deep_sky_blue3]",
        39: "[deep_sky_blue1]{}[/deep_sky_blue1]",
        40: "[sky_blue2]{}[/sky_blue2]",
        41: "[royal_blue1]{}[/royal_blue1]",
        42: "[slate_blue1]{}[/slate_blue1]",
        43: "[purple]{}[purple]",
        44: "[plum3]{}[/plum3]",
        45: "[deep_pink3]{}[/deep_pink3]",
        46: "[pale_violet_red1]{}[/pale_violet_red1]",
        47: "[grey35]{}[/grey35]",
        48: "[grey74]{}[/grey74]",
        49: "[tan]{}[/tan]",
    }
    assert table.Table.grid is not None


def test_case_5():
    list_0 = []
    list_1 = list_tasks.render_labels(list_0, list_0)
    assert list_tasks.priority_colors == {
        4: "[bold red1]P1[/bold red1]",
        3: "[bold orange1]P2[/bold orange1]",
        2: "[blue1]P3[/blue1]",
        1: "P4",
    }
    assert list_tasks.label_format == {
        30: "[deep_pink4]{}[/deep_pink4]",
        31: "[red1]{}[/red1]",
        32: "[orange1]{}[/orange1]",
        33: "[gold1]{}[/gold1]",
        34: "[dark_olive_green3]{}[/dark_olive_green3]",
        35: "[chartreuse3]{}[/chartreuse3]",
        36: "[green3]{}[/green3]",
        37: "[dark_turquoise]{}[/dark_turquoise]",
        38: "[deep_sky_blue3]{}[/deep_sky_blue3]",
        39: "[deep_sky_blue1]{}[/deep_sky_blue1]",
        40: "[sky_blue2]{}[/sky_blue2]",
        41: "[royal_blue1]{}[/royal_blue1]",
        42: "[slate_blue1]{}[/slate_blue1]",
        43: "[purple]{}[purple]",
        44: "[plum3]{}[/plum3]",
        45: "[deep_pink3]{}[/deep_pink3]",
        46: "[pale_violet_red1]{}[/pale_violet_red1]",
        47: "[grey35]{}[/grey35]",
        48: "[grey74]{}[/grey74]",
        49: "[tan]{}[/tan]",
    }


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "D"
    list_0 = [str_0, str_0, str_0, str_0]
    list_tasks.render_tasks(list_0, list_0, list_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    bytes_0 = b"h"
    table_0 = list_tasks.render_tasks(list_0, list_0, bytes_0)
    assert len(table_0.columns) == 4
    assert table_0.rows == []
    assert table_0.title is None
    assert table_0.caption is None
    assert table_0.width is None
    assert table_0.min_width is None
    assert table_0.box is None
    assert table_0.safe_box is None
    assert table_0.pad_edge is True
    assert table_0.show_header is False
    assert table_0.show_footer is False
    assert table_0.show_edge is True
    assert table_0.show_lines is False
    assert table_0.leading == 0
    assert table_0.collapse_padding is False
    assert table_0.style == "none"
    assert table_0.header_style == "bold green"
    assert table_0.footer_style == "table.footer"
    assert table_0.border_style is None
    assert table_0.title_style is None
    assert table_0.caption_style is None
    assert table_0.title_justify == "left"
    assert table_0.caption_justify == "center"
    assert table_0.highlight is False
    assert table_0.row_styles == []
    assert list_tasks.priority_colors == {
        4: "[bold red1]P1[/bold red1]",
        3: "[bold orange1]P2[/bold orange1]",
        2: "[blue1]P3[/blue1]",
        1: "P4",
    }
    assert list_tasks.label_format == {
        30: "[deep_pink4]{}[/deep_pink4]",
        31: "[red1]{}[/red1]",
        32: "[orange1]{}[/orange1]",
        33: "[gold1]{}[/gold1]",
        34: "[dark_olive_green3]{}[/dark_olive_green3]",
        35: "[chartreuse3]{}[/chartreuse3]",
        36: "[green3]{}[/green3]",
        37: "[dark_turquoise]{}[/dark_turquoise]",
        38: "[deep_sky_blue3]{}[/deep_sky_blue3]",
        39: "[deep_sky_blue1]{}[/deep_sky_blue1]",
        40: "[sky_blue2]{}[/sky_blue2]",
        41: "[royal_blue1]{}[/royal_blue1]",
        42: "[slate_blue1]{}[/slate_blue1]",
        43: "[purple]{}[purple]",
        44: "[plum3]{}[/plum3]",
        45: "[deep_pink3]{}[/deep_pink3]",
        46: "[pale_violet_red1]{}[/pale_violet_red1]",
        47: "[grey35]{}[/grey35]",
        48: "[grey74]{}[/grey74]",
        49: "[tan]{}[/tan]",
    }
    assert table.Table.grid is not None
    list_1 = [table_0, table_0, table_0]
    list_tasks.render_tasks(table_0, list_0, list_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"$_"
    str_0 = "p"
    list_0 = [str_0, str_0]
    list_tasks.render_tasks(bytes_0, bytes_0, list_0)
